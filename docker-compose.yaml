networks:
  laravel:
    driver: bridge

services:
  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    tty: true
    ports:
      - "7000:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./example-project:/var/www/app:delegated ### rename from example-project to whats needed ###
    depends_on:
      - php-service
    networks:
      - laravel

  php-service: # if you change this name makes sure to change any depends_on directives, and the fastcgi_pass in ngingx.conf !!!!
    build:
      context: .
      dockerfile: Dockerfile
    container_name: php
    restart: unless-stopped
    tty: true
    expose:
      - "9000"
    volumes:
        - ./example-project:/var/www/example-project:delegated
      # - ./example-project:/var/www/app:delegated ### rename from example-project to whats needed ###
      # - ./php-fpm.conf:/usr/local/etc/php-fpm.conf
      # - ./php-fpm.conf:/usr/local/etc/php-fpm.conf.default
    networks:
      - laravel

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

